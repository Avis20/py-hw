Цель: В это ДЗ вы создадите репозиторий и напишите код, который продемонстрирует работу функций.

1. создать репозиторий на GitHub для этого курса. Предлагается под каждое задание создавать отдельную папку. В итоге все домашки будут в одном репозитории, разбитые по папкам
2. создать в корне репозитория README файл (со стилем на выбор: plain text, Markdown, reStructuredText)
3. создать папку для этой домашки. положить в неё .py файл с решением следующих задач:
    1. написать функцию, которая принимает N целых чисел и возвращает список квадратов этих чисел. Бонусом будет сделать keyword аргумент для выбора степени, в которую будут возводиться числа
    2. написать функцию, которая на вход принимает список из целых чисел, и возвращает только чётные/нечётные/простые числа (выбор производится передачей дополнительного аргумента)
    3. создать декоратор для замера времени выполнения функции

БОНУСНОЕ ЗАДАНИЕ: создать декоратор, который показывает вложенные входы в функцию. Применить на примере вычисления чисел Фибоначчи
[https://gist.github.com/mahenzon/d77361a1bd44f138e706ae4734007ee6](https://gist.github.com/mahenzon/d77361a1bd44f138e706ae4734007ee6)

сложить это всё в один файл. В файле написать код, который продемонстрирует работу всех функций выше. Красивые принты приветствуются. Подсказка: можно воспользоваться модулем pprint

Критерии оценки:

1. [x] репозиторий создан - 1 балл - [https://github.com/Avis20/py-hw](https://github.com/Avis20/py-hw)
2. [x] присутствует README файл (бонус если это не plain text, а Markdown или reStructuredText)
3. [x] домашнее задание лежит в отдельной папке, посвященной этому уроку - 1 балл
4. функция для возведения N чисел в степень - 1 балл
    1. функция использует map
    2. используется не лямбда, а функция из встроенного модуля operator
    3. используется keyword для выбора степени, присутствует значение по умолчанию
5. функция для фильтрации чисел - 1 балл
    1. функция использует filter
    2. для проверки типа фильтрации используются константы (переменные в UPPER_SNAKE_CASE)
    3. для проверки простое ли число создана отдельная функция
6. создание декоратора для замера времени выполнения функции - 1 балл
    1. внутри обёртки используется wraps из functools
    2. декоратор trace - 1 балл
    3. написана функция для вычисления чисел Фибоначчи
    4. функция для вычисления чисел Фибоначчи использует рекурсию
    5. обёртка работает и показывает погружения
    6. для всех написанных функций есть пример их работы - 1 балл
    7. данные выводятся красиво и понятно - 1 балл